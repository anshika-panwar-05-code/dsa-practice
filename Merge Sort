class Solution {

    void mergeSort(int arr[], int l, int r) {
        // code here
        if(l<r){
           int mid=(l+r)/2;
            mergeSort(arr,l,mid);;
            mergeSort(arr,mid+1,r);
            merge(arr,l,mid,r);
            
        }
        
    }
    
  void merge(int[] arr,int l,int mid,int r){
        int n1=mid-l+1;
        int n2=r-mid;//for size of subarray
        int[] left= new int[n1];
        int[]right=new int[n2];
        
        
        for(int i=0;i<n1;i++){
            left[i]=arr[l+i];//left start at position l
        }
        
        for(int j=0;j<n2;j++){
            right[j]=arr[mid+1+j];//right start from mid+1
        }
        
        int i=0;
        int j=0;
        int k=l;//means k=0 means o index;
        
        while(i<n1 && j<n2){
            if(left[i]<=right[j]){
                arr[k]=left[i];
                i++;
            }else{
                arr[k]=right[j];
                j++;
            }
            k++;
        }
        
        while(i<n1){
            arr[k]=left[i];
            i++;
            k++;
        }
        while(j<n2){
            arr[k]=right[j];
            j++;
            k++;
        }
    }
}
